#include <iostream>
#include <fstream>
#include <unordered_map>
#include <string.h>
#include <cmath>
#include <map>

#include "xarchnode.h"
#include "xarchparser.h"
void XArchParser::buildInst(std::vector<std::vector<database::GridContent>>& layout, std::shared_ptr<RouteGraph> graph, XArchNode node, std::string nodeName) {
    auto& instlist = graph->getInstList();
    auto& insts = instlist.getInsts();
    insts.emplace_back(nodeName, insts.size());
    // if (nodeName == "sig_1338") {
    //     std::cout << nodeName << std::endl;
    // }
    auto& inst = insts[insts.size() - 1];
    int id;
    switch (node.type)
    {
    case XArchNodeType::DUMMY:
    break;
    case XArchNodeType::LUT5:
        id = getPinIdxInGraph(layout, graph, node, "IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "LCAS_IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CCAS_IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 0), 157));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 0), 133));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 0), 109));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 0), 96));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(6, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(7, 0), 65));
    break;
    case XArchNodeType::LUT6:
        id = getPinIdxInGraph(layout, graph, node, "IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "IN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "LCAS_IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CCAS_IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "G(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 0), 157));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 0), 133));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 0), 109));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 0), 96));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 0), 35));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(6, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(7, 0), 65));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 1), 145));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 1), 122));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 1), 96));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 1), 88));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 1), 49));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 1), 35));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(6, 1), 49));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(7, 1), 49));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 2), 157));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 3), 157));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 2), 133));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 3), 133));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 2), 109));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 3), 109));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 2), 96));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 3), 96));
    break;
    case XArchNodeType::LRAM:
        id = getPinIdxInGraph(layout, graph, node, "WA(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WA(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WA(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WA(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WA(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WA(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "O(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "O(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::SHIFT:
        id = getPinIdxInGraph(layout, graph, node, "A(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SFTIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "Q(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SO(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::DFF:
        id = getPinIdxInGraph(layout, graph, node, "D(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "Q(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::CLA4:
        id = getPinIdxInGraph(layout, graph, node, "PROP(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PROP(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PROP(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PROP(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "GEN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "GEN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "GEN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "GEN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_IN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_IN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_OUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_OUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_OUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_OUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CAS_OUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 1), 61.78));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 2), 74.087));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 3), 101.737));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(0, 4), 103.943));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 2), 73.875));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 3), 101.478));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(1, 4), 103.685));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 3), 60.829));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(2, 4), 62.385));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(3, 4), 62.083));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 0), 57.007));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 1), 67.273));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 2), 94.888));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(4, 3), 97.093));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 1), 62.775));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 2), 90.404));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(5, 3), 92.609));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(6, 2), 56.707));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(6, 3), 57.51));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(7, 3), 51.396));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(8, 0), 37));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(8, 1), 52));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(8, 2), 76));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(8, 3), 67));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(8, 4), 12));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(9, 0), 37));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(9, 1), 52));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(9, 2), 76));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(9, 3), 67));
        inst.getDelayEdges().push_back(std::make_pair(std::make_pair(9, 4), 12));
    break;
    case XArchNodeType::INPAD:
        id = getPinIdxInGraph(layout, graph, node, "CE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "DI(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DO(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::OUTPAD:
        id = getPinIdxInGraph(layout, graph, node, "CE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "DI(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DO(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::GCU0:
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "A(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "A(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ALUMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ALUMODE(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ALUMODE(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ALUMODE(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "B(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "C(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYCASCIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYINSEL(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYINSEL(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYINSEL(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEA1(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEA2(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEAD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEALUMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEB1(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEB2(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEC(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CECARRYIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CECTRL(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CED(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEINMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEM(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CEP(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "INMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "INMODE(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "INMODE(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "INMODE(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "INMODE(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "MULTSIGNIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OPMODE(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCIN(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTA(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTALLCARRYIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTALUMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTB(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTC(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTCTRL(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTINMODE(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTM(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RSTP(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ACOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "BCOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYCASCOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CARRYOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "MULTSIGNOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "OVERFLOW(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "P(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PATTERNBDETECT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PATTERNDETECT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "PCOUT(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "UNDERFLOW(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "XOROUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::BRAM36K:
        id = getPinIdxInGraph(layout, graph, node, "DIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WEN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "REN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DIN(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AW(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_WEN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_AR(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_REN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "TP_U0_LS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "TP_U1_LS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLR_INNER_BP0_FIFO(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLR_INNER_BP1_FIFO(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "FIFO_CLR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "FIFO_D_R_RDY(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRINS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRIND(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK_USER0_W(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "CLK_USER0_R(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "CLK_USER1_W(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "CLK_USER1_R(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "RST_BRAM_N(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RAM0_MBIST_WM0(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RAM0_MBIST_WM1(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RAM1_MBIST_WM0(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "RAM1_MBIST_WM1(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SUB_DOUT(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SDP0_RD_VLD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "SDP1_RD_VLD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D_R_AEMPTY(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D_R_EMPTY(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ECC_AR(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRFLAGS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRFLAGD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "FIFO_D_W_RDY(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D_DOUT_VLD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D_W_AFULL(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "D_W_FULL(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;
    case XArchNodeType::RAMB:
        id = getPinIdxInGraph(layout, graph, node, "DIN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(64)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(65)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(66)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(67)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(68)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(69)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(70)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DIN(71)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AR(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "AW(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "WEN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "REN(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRINS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRIND(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "CLK(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        inst.setTerminal(true);
        id = getPinIdxInGraph(layout, graph, node, "RST_N(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addInputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(12)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(13)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(14)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(15)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(16)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(17)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(18)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(19)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(20)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(21)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(22)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(23)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(24)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(25)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(26)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(27)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(28)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(29)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(30)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(31)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(32)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(33)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(34)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(35)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(36)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(37)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(38)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(39)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(40)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(41)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(42)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(43)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(44)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(45)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(46)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(47)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(48)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(49)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(50)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(51)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(52)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(53)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(54)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(55)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(56)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(57)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(58)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(59)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(60)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(61)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(62)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(63)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(64)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(65)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(66)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(67)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(68)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(69)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(70)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "DOUT(71)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(1)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(2)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(3)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(4)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(5)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(6)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(7)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(8)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(9)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(10)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRADDR(11)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRFLAGS(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
        id = getPinIdxInGraph(layout, graph, node, "ERRFLAGD(0)");
        graph->setVertexInst(id, insts.size() - 1);
        inst.addOutputPin(id);
    break;


    default:
        break;
    }

}