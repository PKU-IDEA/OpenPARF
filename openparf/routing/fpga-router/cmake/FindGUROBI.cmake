# -----
# @file          : FindGUROBI.cmake
# @project       : OpenPARF
# @author        : Jing Mai (jingmai@pku.edu.cn)
# @created date  : April 27 2023, 18:59:22, Thursday
# @brief         : Try to find GUROBI
# -----
# Last Modified: May 07 2023, 11:58:01, Sunday
# Modified By: Jing Mai <jingmai@pku.edu.cn>
# -----
# @history :
# ====================================================================================
# Date         	By     	(version)	Comments
# -------------	-------	---------	--------------------------------------------------
# ====================================================================================
# Copyright (c) 2020 - 2023 All Right Reserved, PKU-IDEA Group
# -----
# This header is generated by VSCode extension psi-header.
#
# #### Modified from
# - https://support.gurobi.com/hc/en-us/articles/360039499751-How-do-I-use-CMake-to-build-Gurobi-C-C-projects-
# - https://github.com/jrl-umi3218/eigen-gurobi/blob/master/FindGUROBI.cmake
#
# #### Try to find GUROBI
# Hint with GUROBI_DIR or GUROBI_HOME
# Once done this will define
# - GUROBI_FOUND - System has Gurobi
# - GUROBI_INCLUDE_DIRS - The Gurobi include directories
# - GUROBI_LIBRARIES - The libraries needed to use Gurobi

if(GUROBI_INCLUDE_DIR)
    # in cache already
    set(GUROBI_FOUND TRUE)
    set(GUROBI_INCLUDE_DIRS ${GUROBI_INCLUDE_DIR})
    set(GUROBI_LIBRARIES ${GUROBI_CXX_LIBRARY} ${GUROBI_LIBRARY})
else()
    if(GUROBI_DIR)
        message(STATUS "GUROBI_DIR: ${GUROBI_DIR}")
    endif()

    message(STATUS "ENV GUROBI_HOME: $ENV{GUROBI_HOME}")

    find_file(GUROBI_CL gurobi_cl
        HINS "${GUROBI_DIR}/bin" "$ENV{GUROBI_HOME}/bin"
    )

    if(GUROBI_CL)
        message(STATUS "Found GUROBI_CL: ${GUROBI_CL}")
    else()
        message(FATAL_ERROR "Error: GUROBI_CL not found")
    endif()

    execute_process(COMMAND ${GUROBI_CL} --version OUTPUT_VARIABLE GUROBI_VERSION_STRING)
    string(REGEX REPLACE ".*Gurobi Optimizer version ([0-9]+.[0-9]+.[0-9]+).*" "\\1" GUROBI_VERSION ${GUROBI_VERSION_STRING})
    string(REGEX MATCHALL "[0-9]+" VERSION_LIST "${GUROBI_VERSION}")
    list(GET VERSION_LIST 0 GUROBI_VERSION_MAJOR)
    list(GET VERSION_LIST 1 GUROBI_VERSION_MINOR)
    list(GET VERSION_LIST 2 GUROBI_VERSION_PATCH)
    message(STATUS "Found GUROBI_VERSION: ${GUROBI_VERSION}")

    find_path(GUROBI_INCLUDE_DIR
        NAMES gurobi_c.h
        HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
        PATH_SUFFIXES include)

    find_library(GUROBI_LIBRARY
        NAMES gurobi gurobi${GUROBI_VERSION_MAJOR}${GUROBI_VERSION_MINOR}
        HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
        PATH_SUFFIXES lib)
    set(gurobi_library_names)

    # foreach(ver RANGE 00 99)
    # list(APPEND gurobi_library_names gurobi${ver}) # Different versions of Gurobi
    # endforeach()

    # find_library(GUROBI_LIBRARY
    # NAMES gurobi ${gurobi_library_names}
    # HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
    # PATH_SUFFIXES lib)
    message(STATUS "Found GUROBI_INCLUDE_DIR: ${GUROBI_INCLUDE_DIR}")
    message(STATUS "Found GUROBI_LIBRARY: ${GUROBI_LIBRARY}")

    if(CXX)
        if(MSVC)
            # determine Visual Studio year
            if(MSVC_TOOLSET_VERSION EQUAL 142)
                set(MSVC_YEAR "2019")
            elseif(MSVC_TOOLSET_VERSION EQUAL 141)
                set(MSVC_YEAR "2017")
            elseif(MSVC_TOOLSET_VERSION EQUAL 140)
                set(MSVC_YEAR "2015")
            endif()

            if(MT)
                set(M_FLAG "mt")
            else()
                set(M_FLAG "md")
            endif()

            find_library(GUROBI_CXX_LIBRARY
                NAMES gurobi_c++${M_FLAG}${MSVC_YEAR}
                HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
                PATH_SUFFIXES lib)
            find_library(GUROBI_CXX_DEBUG_LIBRARY
                NAMES gurobi_c++${M_FLAG}d${MSVC_YEAR}
                HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
                PATH_SUFFIXES lib)
        else()
            # The Gurobi Linux distribution includes multiple C++ libraries. You may need to choose an alternate version (e.g., libgurobi_g++5.2.a),
            # depending on the version of C++ ABI you are using. You should consult the [supported platform list](https://www.gurobi.com/documentation/9.5/refman/detailed_release_notes_for_9_5.html)
            # for additional information.
            if(CMAKE_CXX_ABI MATCHES "^0?$")
                set(GUROBI_LIB_NAME "libgurobi_g++4.8.a")
            else()
                set(GUROBI_LIB_NAME "libgurobi_g++5.2.a")
            endif()

            find_library(GUROBI_CXX_LIBRARY
                NAMES ${GUROBI_LIB_NAME}
                HINTS ${GUROBI_DIR} $ENV{GUROBI_HOME}
                PATH_SUFFIXES lib)
            set(GUROBI_CXX_DEBUG_LIBRARY ${GUROBI_CXX_LIBRARY})
        endif()

        message(STATUS "Found GUROBI_CXX_LIBRARY: ${GUROBI_CXX_LIBRARY}")
    endif()

    # handle the QUIETLY and REQUIRED arguments and set GUROBI_FOUND to TRUE if all listed variables are TRUE
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(GUROBI DEFAULT_MSG GUROBI_LIBRARY GUROBI_CXX_LIBRARY GUROBI_INCLUDE_DIR)

    mark_as_advanced(GUROBI_INCLUDE_DIR GUROBI_LIBRARY GUROBI_CXX_LIBRARY)

    set(GUROBI_INCLUDE_DIRS ${GUROBI_INCLUDE_DIR})
    set(GUROBI_LIBRARIES ${GUROBI_CXX_LIBRARY} ${GUROBI_LIBRARY})

    message(STATUS "GUROBI_INCLUDE_DIRS: ${GUROBI_INCLUDE_DIRS}")
    message(STATUS "GUROBI_LIBRARIES: ${GUROBI_LIBRARIES}")
endif()